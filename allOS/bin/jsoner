#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Script returns fielsd or json string.
"""

import argparse
import sys
import json
import re



def convert_if_int(val):
	if val[0]==u'i':
		return int(val[1:])
	elif re.match(u'^(\\\\)+i', val):
		return val[1:]
	else:
		return val
		

def split_path(path):
	result = list()
	if not path:
		return result
		
	for arg in path.decode('UTF-8').split('.'):
		append_to_previous_list = (not not result) and result[-1][-1][-1]=='.'

		if not append_to_previous_list:
			result.append(list())
		
		arg = arg if not (arg[-1] == '\\') else arg[:-1] + '.'
		result[-1].append(arg)

	return [convert_if_int(u''.join(x)) for x in result];


def sget(obj, path):
	for x in path:
		obj = obj[x]
	
	return obj
	
def parseArgs():
	parser = argparse.ArgumentParser()
	parser.add_argument("path", help="""Path of value to be returned.
		Separate keys with a dot (.). If key contains dot, then preceded with backslash (\\).
		If key is int (not string containing numbers) then preced key with 'i'. If key starts with 'i' then preced it with backslash (\\).""")
	parser.add_argument("--format", help="Return formatted json.", action="store_true")
	parser.add_argument("--indent", help="Length of indent. Default 2.", type=int, default="2")
	
	return parser.parse_args()

args = parseArgs()

json_str = json.load(sys.stdin)
result = sget(json_str, split_path(args.path))

print json.dumps(result, sort_keys=True, indent=args.indent, separators=(',', ': ')) if args.format else result

# print sget(json_str, split_path(arg.pop(0)))

#print "\n".join([json.dumps(json_str[field], sort_keys=True, indent=2, separators=(',', ': ')) for field in arg])

